{"version":3,"sources":["client.js"],"names":["$","click","post","data","status","console","log","socket","io","connect","query","roomToken","speakerToken","on","msg","emit","payload","proStatus"],"mappings":"AAAA;AACAA,CAAC,CAAC,eAAD,CAAD,CAAmBC,KAAnB,CAAyB,YAAU;AAChC;;;;;;;;;;;AAYAD,EAAAA,CAAC,CAACE,IAAF,CAAO,mCAAP,EACC;AACI,gBAAY,MADhB;AAEI,gBAAY,OAFhB;AAGI,iBAAa;AAHjB,GADD,EAMC,UAASC,IAAT,EAAeC,MAAf,EAAsB;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EADc,CAEd;AACP,GATF;AAUF,CAvBD,GAyBA;;AACA,IAAII,MAAM,GAAGC,EAAE,CAACC,OAAH,CACX,6BADW,EACmB;AAC9BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE,SADN;AAELC,IAAAA,YAAY,EAAE;AAFT;AADuB,CADnB,CAAb,EAQA;;AACAL,MAAM,CAACM,EAAP,CAAU,eAAV,EAA2B,UAACC,GAAD,EAAQ;AAC3BT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAP,EAAAA,MAAM,CAACQ,IAAP,CAAY,kBAAZ,EAAgC,aAAhC;AACAR,EAAAA,MAAM,CAACQ,IAAP,CAAY,mBAAZ,EAAiC,CAACD,GAAG,CAACE,OAAJ,CAAYC,SAAb,EAAwB,cAAxB,CAAjC;AACAV,EAAAA,MAAM,CAACQ,IAAP,CAAY,aAAZ,EAA2BD,GAAG,CAACE,OAAJ,CAAYC,SAAvC;AACP,CALD;AAMAV,MAAM,CAACM,EAAP,CAAU,uBAAV,EAAmC,UAACC,GAAD,EAAO;AAACT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB,CAA5D;AACAP,MAAM,CAACM,EAAP,CAAU,yBAAV,EAAqC,UAACC,GAAD,EAAO;AAACT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB,CAA9D;AACAP,MAAM,CAACM,EAAP,CAAU,wBAAV,EAAoC,UAACC,GAAD,EAAO;AAACT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB,CAA7D;AACAP,MAAM,CAACM,EAAP,CAAU,0BAAV,EAAsC,UAACC,GAAD,EAAO;AAACT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB,CAA/D;AACAP,MAAM,CAACM,EAAP,CAAU,uBAAV,EAAmC,UAACC,GAAD,EAAO;AAACT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB,CAA5D;AACAP,MAAM,CAACM,EAAP,CAAU,yBAAV,EAAqC,UAACC,GAAD,EAAO;AAACT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB,CAA9D;AACAP,MAAM,CAACM,EAAP,CAAU,oBAAV,EAAgC,UAACC,GAAD,EAAO;AAACT,EAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB,CAAzD","file":"client.62456f60.js","sourceRoot":"..","sourcesContent":["//form submission\n$('#submitButton').click(function(){\n   /* $.post(\"http://localhost:3000/create\",\n    {\n        transcript: \"smth... \",\n        proStatus: true,\n        roomName: \"hello world!\",\n        userToken: \"8b8ac63\"\n    },\n    function(data, status){\n            console.log(data);\n            //console.log(\"Data: \" + data[1].payload.roomToken + data[1].payload.speakerToken + \"\\nStatus: \" + status);\n    });*/\n        \n   $.post(\"http://localhost:3000/auth/logout\",\n    {\n        \"username\": \"Joel\",\n        \"password\": \"12345\",\n        \"userToken\": \"clECWBj\"\n    },\n    function(data, status){\n            console.log(data);\n            //console.log(\"Data: \" + data[1].payload.roomToken + data[1].payload.speakerToken + \"\\nStatus: \" + status);\n    });\n});\n\n//normal users\nlet socket = io.connect(\n  \"http://localhost:3000/rooms\",{\n  query: {\n    roomToken: \"fx7mwBE\",\n    speakerToken: \"ChMD1qB\" \n  }\n});\n\n//Example Usage\nsocket.on(\"initHandshake\", (msg)=> {\n        console.log(msg)\n        socket.emit(\"transcriptUpdate\", \"helloworld!\");\n        socket.emit(\"escalationRequest\", [msg.payload.proStatus, \"hello world!\"]);\n        socket.emit(\"checkStatus\", msg.payload.proStatus);\n});\nsocket.on(\"speakerEnteredCleared\", (msg)=>{console.log(msg)});\nsocket.on(\"transcriptUpdateCleared\", (msg)=>{console.log(msg)});\nsocket.on(\"transcriptUpdateFailed\", (msg)=>{console.log(msg)});\nsocket.on(\"escalationRequestCleared\", (msg)=>{console.log(msg)});\nsocket.on(\"escalationRequestSent\", (msg)=>{console.log(msg)});\nsocket.on(\"escalationRequestFailed\", (msg)=>{console.log(msg)});\nsocket.on(\"checkStatusCleared\", (msg)=>{console.log(msg)});\n"]}